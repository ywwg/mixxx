#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import sys
import SCons
import shutil

from build import util

Import('build')

mixxxminimal_sources = [
	"base/Pitch.cpp",
	"dsp/chromagram/Chromagram.cpp",
	"dsp/chromagram/ConstantQ.cpp",
	"dsp/chromagram/CQprecalc.cpp",
	"dsp/keydetection/GetKeyMode.cpp",
	"dsp/onsets/DetectionFunction.cpp",
	"dsp/onsets/PeakPicking.cpp",
	"dsp/phasevocoder/PhaseVocoder.cpp",
	"dsp/rateconversion/Decimator.cpp",
	"dsp/signalconditioning/DFProcess.cpp",
	"dsp/signalconditioning/Filter.cpp",
	"dsp/signalconditioning/FiltFilt.cpp",
	"dsp/signalconditioning/Framer.cpp",
	"dsp/tempotracking/DownBeat.cpp",
	"dsp/tempotracking/TempoTrack.cpp",
	"dsp/tempotracking/TempoTrackV2.cpp",
	"dsp/tonal/ChangeDetectionFunction.cpp",
	"dsp/tonal/TCSgram.cpp",
	"dsp/tonal/TonalEstimator.cpp",
	"dsp/transforms/FFT.cpp",
	"ext/kissfft/kiss_fft.c",
	"ext/kissfft/kiss_fftr.c",
	"maths/Correlation.cpp",
	"maths/KLDivergence.cpp",
	"maths/MathUtilities.cpp",
	"plugins/BarBeatTrack.cpp",
	"plugins/KeyDetect.cpp",
	"plugins/BeatTrack.cpp",
	"plugins/TonalChangeDetect.cpp",
	"plugins/MixxxBpmDetection.cpp",
	"libmain.cpp",
]

#Tell SCons to build the plugin
#=========================
if int(build.flags['vamp']):
    env = build.env.Clone()
    conf = Configure(env, custom_tests = { 'CheckForPKGConfig' : util.CheckForPKGConfig,
                                       'CheckForPKG' : util.CheckForPKG })

    env.Append(CPPPATH=['.'])

    # A relative LIBPATH pointing to lib/vamp tells SCons that the 'vamp-sdk'
    # target defined in lib/vamp/SConscript should be built.  If we used an
    # absolute path (e.g. '#lib/vamp'), then SCons will not automatically add
    # linXX_build/lib/vamp to the LIBPATH, which is where our internally-linked
    # versions of VAPM and SoundTouch are written.

    env.Append(LIBPATH='../lib/vamp')
    env['LIBS'].remove('vamp-hostsdk')
    env.Append(LIBS=['vamp-sdk'])

    # A relative LIBPATH pointing to lib/soundtouch tells SCons that the
    # 'soundtouch' target defined in lib/soundtouch/SConscript should be built.
    env.Append(LIBPATH='../lib/soundtouch')

    env = conf.Finish()
    results = []
    if build.platform_is_linux:
        env["LINKFLAGS"].append("-Wl,--version-script=vamp-plugins/vamp-plugin.map")
    if build.platform_is_windows:
        env["LINKFLAGS"].remove("/entry:mainCRTStartup")
        env["LINKFLAGS"].append("/EXPORT:vampGetPluginDescriptor")
        #this will reduce DLL dependencies; no need to depend on MSVCRT.dll, etc
        #env["LINKFLAGS"].remove("/nodefaultlib:LIBCMT.lib")
        #env["LINKFLAGS"].remove("/nodefaultlib:LIBCMTd.lib")
        #env["LINKFLAGS"].append("/NODEFAULTLIB:MSVCRT.lib")
        #env["LINKFLAGS"].append("/DEFAULTLIB:LIBCMT.lib")
        #env["LINKFLAGS"].append("/DEFAULTLIB:LIBCPMT.lib")
        mixxxminimal_bin = env.SharedLibrary('libmixxxminimal', mixxxminimal_sources)
        results.append("mixxxminimal_bin")
        if build.bundle_pdbs:
            mixxxminimal_pdb = env.SideEffect('libmixxxminimal.pdb', mixxxminimal_bin)
            results.append("mixxxminimal_pdb")
    else:
        mixxxminimal_bin = env.SharedLibrary('mixxxminimal', mixxxminimal_sources)
        results.append("mixxxminimal_bin")

    # Pass this library object file back to the SConscript above us.
    Return(results)
else:
    Return("")
